import { Catch, ArgumentsHost, HttpException, HttpStatus, Logger } from '@nestjs/common';
import { ResponseCode } from 'src/core/http/http-code.enum';
import { CustomHttpException } from 'src/core/http/http-exception';

// TODO: Sentry ÏûëÏóÖ
// üí°HttpException ÌÅ¥ÎûòÏä§Îäî 400ÎåÄ ÏóêÎü¨ÏôÄ 500 ÏóêÎü¨Î•º Ìè¨Ìï®Ìïú Î™®Îì† HTTP ÏóêÎü¨Î•º ÌëúÌòÑÌïòÎäî ÌÅ¥ÎûòÏä§
@Catch(CustomHttpException, HttpException)
export class HttpExceptionFilter {
  private readonly logger = new Logger(HttpExceptionFilter.name); // Î°úÍ±∞ Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ±

  catch(exception: CustomHttpException | HttpException, host: ArgumentsHost) {
    // TODO: Î°úÍπÖ Ïãú Ïñ¥Îñ§ Ï†ïÎ≥¥Îì§ÏùÑ Îã¥Îäî Í≤å Ï¢ãÏùÄÏßÄ Î¶¨ÏÑúÏπò Ìï¥ÏÑú Ï†ÅÏö©
    // TODO: Î∞∞Ìè¨Ìïú ÏÑúÎπÑÏä§Ïùò Î°úÍ∑∏Î∑∞Ïñ¥ÏóêÏÑú Î≥º Ïàò ÏûàÎäîÏßÄ ÌôïÏù∏ ÌïÑÏöî
    this.logger.error(exception.message, exception.stack); // ÏòàÏô∏ Ï†ïÎ≥¥ Î°úÍπÖ -> ÌÑ∞ÎØ∏ÎÑêÏóêÎäî Î°úÍπÖÎêúÎã§!

    const ctx = host.switchToHttp();
    const response = ctx.getResponse();
    const request = ctx.getRequest();

    let code: ResponseCode;
    let status: number;
    let message: string;

    // ÏòàÏô∏ Í∞ùÏ≤¥Í∞Ä HttpException ÌÉÄÏûÖÏù∏ÏßÄ ÌôïÏù∏
    if (exception instanceof HttpException) {
      // * HttpException ÌÉÄÏûÖÏùº Í≤ΩÏö∞
      status = exception.getStatus();
      message = exception.message;

      if (exception instanceof CustomHttpException) {
        // Ïª§Ïä§ÌÖÄ ÏòàÏô∏ Í∞ùÏ≤¥Ïùº Í≤ΩÏö∞
        code = exception.code;
      } else {
        //  Ï†ïÏùòÌïòÏßÄ ÏïäÏùÄ HttpExceptionÏùº Í≤ΩÏö∞
        code = ResponseCode.UNKNOWN_ERROR;
      }
    } else {
      // * HttpException ÌÉÄÏûÖÏù¥ ÏïÑÎãê Í≤ΩÏö∞ -> 500ÏóêÎü¨
      status = HttpStatus.INTERNAL_SERVER_ERROR;
      message = ResponseCode.INTERNAL_SERVER_ERROR;
      code = ResponseCode.INTERNAL_SERVER_ERROR;
    }

    response.status(status).json({
      status,
      message,
      error: { code },
    });
  }
}
